Topic: Dynamic Memory Allocation 
When you allocate memory dynamically, it is stored in the heap, and when you release it using delete, the memory is marked as free, but the pointer itself still holds the old address. Accessing that memory after deletion leads to undefined behavior, which means the output can be unpredictable—it might show the previous value, garbage data, or even crash the program. In many cases, especially in some versions of IDEs like Code::Blocks, you may observe garbage values instead of crashes because the memory has not yet been overwritten by other parts of the program. This does not mean the behavior is safe or reliable—it simply hasn’t failed visibly. To avoid accidental access and bugs, it is good practice to set the pointer to nullptr after deletion. This helps ensure that any further attempt to use it results in a clear and detectable error. Check the attached document to understand this better.

https://docs.google.com/document/d/179HYVemA6lbALundr2r23_eJkVEUobAWdCybruCytYA/edit?tab=t.0